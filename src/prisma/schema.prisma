// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  first_name     String   @db.VarChar(255)
  last_name      String   @db.VarChar(255)
  email          String   @unique
  phone          String?  @unique
  gender         GENDER
  email_verified Boolean  @default(false)
  phone_verified Boolean  @default(false)
  role           ROLE     @default(PATIENT)
  password       String   @db.VarChar(1000)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  patient        Patient?
  Doctor         Doctor?

  @@index([email, phone])
}

model Patient {
  id        String   @id @default(uuid())
  birthdate DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Doctor {
  id                   String              @id @default(uuid())
  specialization       String              @db.VarChar(255)
  hospital_clinic_name String              @db.VarChar(255)
  verification         VERIFICATION_STATUS @default(PENDING)
  location             Location            @relation(fields: [locationId], references: [id])
  locationId           String              @unique
  user                 User                @relation(fields: [userId], references: [id])
  userId               String              @unique
  degree               Document[]
}

model Document {
  id       String       @id @default(uuid())
  type     DOCUMENTTYPE @default(DEGREE)
  url      String       @db.VarChar(255)
  Doctor   Doctor       @relation(fields: [doctorId], references: [id])
  doctorId String       @unique

  @@index([doctorId, type], name: "doctorId_type")
}

model Location {
  id      String  @id @default(uuid())
  address String  @db.VarChar(255)
  city    String  @db.VarChar(255)
  state   String  @db.VarChar(255)
  Doctor  Doctor?
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum ROLE {
  ADMIN
  PATIENT
  DOCTOR
}

enum DOCUMENTTYPE {
  DEGREE
  CERTFICATE
}

enum VERIFICATION_STATUS {
  PENDING
  VERIFIED
  REJECTED
}
