// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  first_name     String   @db.VarChar(255)
  last_name      String   @db.VarChar(255)
  email          String   @unique
  phone          String?  @unique
  gender         GENDER
  image          String?  @db.VarChar(255)
  email_verified Boolean  @default(false)
  phone_verified Boolean  @default(false)
  role           ROLE     @default(PATIENT)
  password       String   @db.VarChar(1000)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  patient        Patient?
  Doctor         Doctor?

  @@index([email, phone])
}

model Patient {
  id          String        @id @default(uuid())
  birthdate   DateTime
  user        User          @relation(fields: [userId], references: [id])
  userId      String        @unique
  Appointment Appointment[]
  Reviews     Reviews[]
}

model Doctor {
  id                        String              @id @default(uuid())
  specialization            String              @db.VarChar(255)
  hospital_clinic_name      String              @db.VarChar(255)
  verification              VERIFICATION_STATUS @default(PENDING)
  about                     String?             @db.Text
  location                  Location            @relation(fields: [locationId], references: [id])
  locationId                String              @unique
  user                      User                @relation(fields: [userId], references: [id])
  userId                    String              @unique
  appointment_types_allowed String[]            @default(["PHYSICAL"])
  degree                    Document[]
  schedule                  Schedule[]
  charges                   Charges[]
  appointment               Appointment[]
  reviews                   Reviews[]
}

model Document {
  id       String       @id @default(uuid())
  type     DOCUMENTTYPE @default(DEGREE)
  name     String       @db.VarChar(255)
  Doctor   Doctor       @relation(fields: [doctorId], references: [id])
  doctorId String       @unique

  @@index([doctorId, type], name: "doctorId_type")
}

model Location {
  id      String  @id @default(uuid())
  address String  @db.VarChar(255)
  city    String  @db.VarChar(255)
  state   String  @db.VarChar(255)
  Doctor  Doctor?
}

model Schedule {
  id                   String  @id @default(uuid())
  day                  String
  startTime            String
  endTime              String
  break_start          String?
  break_end            String?
  buffer               Int
  is_active            Boolean @default(true)
  appointment_interval Int
  Doctor               Doctor  @relation(fields: [doctorId], references: [id])
  doctorId             String

  @@unique([doctorId, day], name: "doctorId_day")
}

model Charges {
  id               String @id @default(uuid())
  amount           Int
  appointment_type String
  Doctor           Doctor @relation(fields: [doctorId], references: [id])
  doctorId         String

  @@unique([doctorId, appointment_type], name: "doctorId_appointment_type")
}

model Appointment {
  id             String             @id @default(uuid())
  date           DateTime
  time           String
  charges        Int
  type           String
  patient_name   String
  message        String             @db.Text
  Doctor         Doctor             @relation(fields: [doctorId], references: [id])
  doctorId       String
  Patient        Patient            @relation(fields: [patientId], references: [id])
  patientId      String
  status         APPOINTMENT_STATUS @default(PENDING)
  payment_status PAYMENT_STATUS     @default(PENDING)

  @@unique([doctorId, patientId, date], name: "doctorId_patientId_date")
}

model Reviews {
  id        String   @id @default(uuid())
  rating    Int
  review    String
  date      DateTime
  Doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  String
  Patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String
}

enum GENDER {
  MALE
  FEMALE
  OTHER
}

enum ROLE {
  ADMIN
  PATIENT
  DOCTOR
}

enum DOCUMENTTYPE {
  DEGREE
  CERTFICATE
}

enum VERIFICATION_STATUS {
  PENDING
  VERIFIED
  REJECTED
}

enum APPOINTMENT_STATUS {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

enum PAYMENT_STATUS {
  PENDING
  PAID
}
